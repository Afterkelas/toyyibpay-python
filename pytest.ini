[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may require external services)
    async: Asynchronous tests
    db: Database tests (require database setup)
    slow: Slow tests (>1 second)
    smoke: Smoke tests (basic functionality)
    regression: Regression tests
    skip_ci: Skip in CI environment

# Output options
addopts =
    -ra
    --strict-markers
    --strict-config
    --cov=toyyibpay
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --maxfail=1
    --tb=short
    --disable-warnings
    -v

# Asyncio
asyncio_mode = auto

# Timeout
timeout = 30
timeout_method = thread

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage
[coverage:run]
source = toyyibpay
omit =
    */tests/*
    */test_*
    */__init__.py
    */migrations/*
    */examples/*
    */docs/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    except ImportError
    pass

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml